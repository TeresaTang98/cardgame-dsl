/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.cardgame.validation

import org.eclipse.xtext.validation.Check
import uk.ac.kcl.inf.cardgame.cardGameLanguage.CardPropertyType
import uk.ac.kcl.inf.cardgame.cardGameLanguage.CardGameLanguagePackage
import uk.ac.kcl.inf.cardgame.cardGameLanguage.Card
import uk.ac.kcl.inf.cardgame.cardGameLanguage.CardGame
import uk.ac.kcl.inf.cardgame.cardGameLanguage.SingleRule
import uk.ac.kcl.inf.cardgame.cardGameLanguage.EqualRule

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class CardGameLanguageValidator extends AbstractCardGameLanguageValidator { 
	public static val INVALID_PROPERTY_TYPE = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.INVALID_PROPERTY_TYPE'
	public static val INVALID_CARD_NAME1 = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.INVALID_CARD_NAME1'
	public static val INVALID_CARD_NAME2 = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.INVALID_CARD_NAME2'
	public static val INVALID_RULE_NAME = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.INVALID_RULE_NAME'
	public static val INVALID_RULE_LEVEL = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.INVALID_RULE_LEVEL'
	public static val INVALID_SINGLE_RULE_NAME = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.INVALID_SINGLE_RULE_NAME'
	public static val DOUBLE_CARD_NAME = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.DOUBLE_CARD_NAME'
	public static val DOUBLE_RULE_NAME = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.DOUBLE_RULE_NAME'
	public static val DOUBLE_RULE_LEVEL = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.DOUBLE_RULE_LEVEL'
	public static val DOUBLE_PROPERTY_TYPE = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.DOUBLE_PROPERTY_TYPE'
	public static val SMALL_CARD_POSITION = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.SMALL_CARD_POSITION'
	public static val LARGE_CARD_POSITION = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.LARGE_CARD_POSITION'
	public static val SMALL_CARD_NUMBER = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.SMALL_CARD_NUMBER'
	public static val LARGE_CARD_NUMBER = 'uk.ac.kcl.inf.cardgame.cardGameLanguage.LARGE_CARD_NUMBER'
 	
 	// check property name
	@Check
	def checkPropertyStartsWithLowerCase(CardPropertyType property) {
    	if (!Character.isLowerCase(property.getName().charAt(0))) {
        	warning("Property name should start with a lower-case character",
            	CardGameLanguagePackage.Literals.CARD_PROPERTY_TYPE__NAME,
            	INVALID_PROPERTY_TYPE);
    	}
	}
	
	
	// check card name: starts with a capital and ends with a number
	@Check
	def checkNameStartsWithCaptital(Card card) {
    	if (!Character.isUpperCase(card.getName().charAt(0))) {
        	warning("Card name should start with a capital",
            	CardGameLanguagePackage.Literals.CARD__NAME,
            	INVALID_CARD_NAME1);
    	}
	}
	
	@Check
	def checkNameEndsWithNumber(Card card) {
    	if (!Character.isDigit(card.getName().charAt(card.getName().length()-1))) {
        	warning("Card name should end with a number",
            	CardGameLanguagePackage.Literals.CARD__NAME,
            	INVALID_CARD_NAME2);
    	}
	}
	
	// check double properties
	@Check
	def checkPropertyIsUnique(CardGame cardgame) {
		var list = cardgame.cardpropertytypes
    	for (var i=0; i < list.size; i++){
    		for (var j=i+1; j<list.size; j++){
    			if(list.get(i).name.equals(list.get(j).name)){
    				warning("Double defined property!",list.get(i),
    					CardGameLanguagePackage.Literals.CARD_PROPERTY_TYPE__NAME, DOUBLE_PROPERTY_TYPE
    				)
    			}
    		}
    	}
	}
	
	// static semantics: check double card names
	@Check
	def checkCardNameIsUnique(CardGame cardgame) {
		var list = cardgame.cards
    	for (var i=0; i < list.size; i++){
    		for (var j=i+1; j<list.size; j++){
    			if(list.get(i).name.equals(list.get(j).name)){
    				warning("Double defined card name!",list.get(i),
    					CardGameLanguagePackage.Literals.CARD__NAME,DOUBLE_CARD_NAME)
    			}
    		}
    	}
	}
	
	// static semantics: check double rule names
	@Check
	def checkRuleNameIsUnique(CardGame cardgame) {
		var list = cardgame.rule
    	for (var i=0; i < list.size; i++){
    		for (var j=i+1; j<list.size; j++){
    			if(list.get(i).name.equals(list.get(j).name)){
    				warning("Double defined rule name!",list.get(i),
    					CardGameLanguagePackage.Literals.GAME_RULE__NAME, DOUBLE_RULE_NAME
    				)
    			}
    		}
    	}
	}
	
	// check rule level
	@Check
	def checkRuleLevelLargerThanZero(CardGame cardgame) {
    	var list = cardgame.rule
    	for (var i=0; i < list.size; i++){
    		for (var j=i+1; j<list.size; j++){
    			if(list.get(i).level <= 0){
    				warning("Value of level should larger than 0!",list.get(i),
    					CardGameLanguagePackage.Literals.GAME_RULE__LEVEL, INVALID_RULE_LEVEL
    				)
    			}
    		}
    	}
	}
	
	// static semantics: check rule level
	@Check
	def checkRuleLevelIsUnique(CardGame cardgame) {
		var list = cardgame.rule
    	for (var i=0; i < list.size; i++){
    		for (var j=i+1; j<list.size; j++){
    			if(list.get(i).level.equals(list.get(j).level)){
    				warning("Double defined rule level! It should be unique!",list.get(i),
    					CardGameLanguagePackage.Literals.GAME_RULE__LEVEL, DOUBLE_RULE_LEVEL
    				)
    			}
    		}
    	}
	}
	
	// check array out of bounds
	@Check(NORMAL)
	def checkArrayOutofBounds(CardGame cardgame){
		var list = cardgame.rule.filter(SingleRule)
		for (var i=0; i < list.size; i++){
			if(list.get(i).number1 <= 0){
				error("Position of the card must be larger than 0!",list.get(i),
    					CardGameLanguagePackage.Literals.SINGLE_RULE__NUMBER1, SMALL_CARD_POSITION
    				)
			}else if(list.get(i).number2 <= 0){
				error("Position of the card must be larger than 0!",list.get(i),
    					CardGameLanguagePackage.Literals.SINGLE_RULE__NUMBER2, SMALL_CARD_POSITION
    				)
			
			}else if(list.get(i).number1 > cardgame.number){
				error("Position of the card must be smaller than the number of hole cards!",list.get(i),
    					CardGameLanguagePackage.Literals.SINGLE_RULE__NUMBER1, LARGE_CARD_POSITION
    				)
			
			}else if(list.get(i).number2 > cardgame.number){
				error("Position of the card must be smaller than the number of hole cards!",list.get(i),
    					CardGameLanguagePackage.Literals.SINGLE_RULE__NUMBER2, LARGE_CARD_POSITION
    				)
			
			}
		}
	}
	
	// check compared cards number of EqualRule
	@Check(NORMAL)
	def checkComparedCardsNumber (CardGame cardgame){
		var list = cardgame.rule.filter(EqualRule)
		for (var i=0; i < list.size; i++){
			if(list.get(i).number <= 0){
				error("Number must be larger than 0!",list.get(i),
    					CardGameLanguagePackage.Literals.EQUAL_RULE__NUMBER, SMALL_CARD_NUMBER
    				)
			}else if(list.get(i).number > cardgame.number){
				error("Number must be smaller than the number of hole cards!",list.get(i),
    					CardGameLanguagePackage.Literals.EQUAL_RULE__NUMBER, LARGE_CARD_NUMBER
    				)
			
			}
		}
	}
	
	
	
}
