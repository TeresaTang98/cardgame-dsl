/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.inf.cardgame.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import uk.ac.kcl.inf.cardgame.cardGameLanguage.CardGame
import uk.ac.kcl.inf.cardgame.cardGameLanguage.Card
import uk.ac.kcl.inf.cardgame.cardGameLanguage.CardProperty
import uk.ac.kcl.inf.cardgame.cardGameLanguage.CardPropertyType
import uk.ac.kcl.inf.cardgame.cardGameLanguage.GameRule
//import uk.ac.kcl.inf.cardgame.cardGameLanguage.NonDrawRule
import uk.ac.kcl.inf.cardgame.cardGameLanguage.SingleRule
import uk.ac.kcl.inf.cardgame.cardGameLanguage.EqualRule
import uk.ac.kcl.inf.cardgame.cardGameLanguage.ExpressionKeyword
import uk.ac.kcl.inf.cardgame.cardGameLanguage.PlayerRole
//import uk.ac.kcl.inf.cardgame.cardGameLanguage.DrawRule
//import uk.ac.kcl.inf.cardgame.cardGameLanguage.HoleCardsRule

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class CardGameLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		//resource.contents get all the top-level models
		val model = resource.contents.head as CardGame
		fsa. generateFile(deriveTargetFileNameFor(model, resource), model.generate)
//生成java文件
		val className = resource.deriveClassNameFor
		fsa.generateFile(className + '.java', model.doGenerateClass(className))
	}
//生成txt文件的例子
	def deriveTargetFileNameFor(CardGame game, Resource resource) {
		resource.URI.appendFileExtension('txt').lastSegment
	}
	
//获取类名
	def deriveClassNameFor(Resource resource) {
		val origName = resource.URI.lastSegment
		origName.substring(0, origName.indexOf('.')).toFirstUpper + 'CardGame'
	}
	//一个例子，生成txt文件
	def generate(CardGame game) '''
	«game.eAllContents.filter(Card).size» test
	'''
	
//生成java类
	def String doGenerateClass(CardGame game, String className) '''
		import uk.ac.kcl.inf.cardgame.library.*;
		
		import java.lang.reflect.Array;
		import java.util.ArrayList;
		import java.util.Arrays;
		import java.util.List;
		import java.util.Random;
		
		public class «className» {
		    public static List<Card> genCards() {
		        List<Card> cards = new ArrayList<>();
		        «game.cards.map[generateCardsValue()].join(' ')»
		        return cards;
		    }
		    public static List<Rule> genRules() {
		    	Rule[] rules = new Rule[] {
    	               «game.rule.map[generateRule()].join(' ')»
    	        };
    	        return new ArrayList<Rule>(Arrays.asList(rules));
		    }
		    public static void main(String[] args) {
		        CardGame game = new CardGame(genCards(), genRules(), «game.number»);
		        game.start();
		    }
		}
	'''
//	获取每张card的suit和power，得到一个数组[power 2, suit 3]	
	def generateCardsValue(Card card)'''
«««	name: «card.name»
	CardProperty[] «card.name» = new CardProperty[]{«card.definition.map[getCardValue()].join(' ')»};
    cards.add(new Card(Arrays.asList(«card.name»)));
	'''
	def getCardValue(CardProperty cp)'''
«««	«cp.^type.^name» «cp.^value»
	new CardProperty("«cp.^type.^name»", «cp.^value»),
	'''
//	得到 power和suits
	def getCardPropertyType(CardPropertyType cpt) '''
	«cpt.name»
	'''
	
//生成rule- single rule
	dispatch def String generateRule(SingleRule sr)'''
«««	«sr.name»
«««	«sr.role1»
«««	«sr.number1.^val»
«««	«sr.^item.^name»
«««	«sr.keyword»
«««	«sr.role2»
«««	«sr.number2.^val»
	new SingleRule("«sr.name»", «sr.number1», «sr.number2», "«sr.keyword»", "«sr.^item.^name»"),
	'''
	dispatch def String generateRule(EqualRule er)'''
«««	«er.name»
«««	«er.number.^val»
«««	«er.^item.^name»
«««	«er.level.^val»
    new EqualRule("«er.name»", "«er.^item.^name»", «er.level»),
	'''
//	dispatch def String generateRule(HoleCardsRule hcr)'''
//	«hcr.number.^val»
//	'''
}
