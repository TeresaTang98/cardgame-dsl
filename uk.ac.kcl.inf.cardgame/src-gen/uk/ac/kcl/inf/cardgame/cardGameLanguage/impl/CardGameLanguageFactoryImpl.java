/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.cardgame.cardGameLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.cardgame.cardGameLanguage.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CardGameLanguageFactoryImpl extends EFactoryImpl implements CardGameLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CardGameLanguageFactory init()
  {
    try
    {
      CardGameLanguageFactory theCardGameLanguageFactory = (CardGameLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(CardGameLanguagePackage.eNS_URI);
      if (theCardGameLanguageFactory != null)
      {
        return theCardGameLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CardGameLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CardGameLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CardGameLanguagePackage.CARD_GAME: return createCardGame();
      case CardGameLanguagePackage.CARD: return createCard();
      case CardGameLanguagePackage.CARD_PROPERTY: return createCardProperty();
      case CardGameLanguagePackage.CARD_PROPERTY_TYPE: return createCardPropertyType();
      case CardGameLanguagePackage.GAME_RULE: return createGameRule();
      case CardGameLanguagePackage.SINGLE_RULE: return createSingleRule();
      case CardGameLanguagePackage.EQUAL_RULE: return createEqualRule();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CardGameLanguagePackage.EXPRESSION_KEYWORD:
        return createExpressionKeywordFromString(eDataType, initialValue);
      case CardGameLanguagePackage.PLAYER_ROLE:
        return createPlayerRoleFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CardGameLanguagePackage.EXPRESSION_KEYWORD:
        return convertExpressionKeywordToString(eDataType, instanceValue);
      case CardGameLanguagePackage.PLAYER_ROLE:
        return convertPlayerRoleToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CardGame createCardGame()
  {
    CardGameImpl cardGame = new CardGameImpl();
    return cardGame;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Card createCard()
  {
    CardImpl card = new CardImpl();
    return card;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CardProperty createCardProperty()
  {
    CardPropertyImpl cardProperty = new CardPropertyImpl();
    return cardProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CardPropertyType createCardPropertyType()
  {
    CardPropertyTypeImpl cardPropertyType = new CardPropertyTypeImpl();
    return cardPropertyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GameRule createGameRule()
  {
    GameRuleImpl gameRule = new GameRuleImpl();
    return gameRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleRule createSingleRule()
  {
    SingleRuleImpl singleRule = new SingleRuleImpl();
    return singleRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualRule createEqualRule()
  {
    EqualRuleImpl equalRule = new EqualRuleImpl();
    return equalRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExpressionKeyword createExpressionKeywordFromString(EDataType eDataType, String initialValue)
  {
    ExpressionKeyword result = ExpressionKeyword.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertExpressionKeywordToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PlayerRole createPlayerRoleFromString(EDataType eDataType, String initialValue)
  {
    PlayerRole result = PlayerRole.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPlayerRoleToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CardGameLanguagePackage getCardGameLanguagePackage()
  {
    return (CardGameLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CardGameLanguagePackage getPackage()
  {
    return CardGameLanguagePackage.eINSTANCE;
  }

} //CardGameLanguageFactoryImpl
