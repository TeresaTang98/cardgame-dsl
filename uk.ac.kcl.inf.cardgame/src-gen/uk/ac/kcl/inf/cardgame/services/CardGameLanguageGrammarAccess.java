/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.cardgame.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CardGameLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class CardGameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cardgame.CardGameLanguage.CardGame");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPropertiesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCardpropertytypesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCardpropertytypesCardPropertyTypeParserRuleCall_2_2_0 = (RuleCall)cCardpropertytypesAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cCardpropertytypesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cCardpropertytypesCardPropertyTypeParserRuleCall_2_3_1_0 = (RuleCall)cCardpropertytypesAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cCardsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCardsCardParserRuleCall_3_0 = (RuleCall)cCardsAssignment_3.eContents().get(0);
		private final Keyword cHoleCardNumberKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNumberAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNumberINTTerminalRuleCall_6_0 = (RuleCall)cNumberAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cGameRuleKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cRuleAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cRuleGameRuleParserRuleCall_8_2_0 = (RuleCall)cRuleAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cRuleAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cRuleGameRuleParserRuleCall_8_3_1_0 = (RuleCall)cRuleAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		
		//CardGame:
		//	'Game' name=ID ('Properties' '{' cardpropertytypes+=CardPropertyType (',' cardpropertytypes+=CardPropertyType)* '}')
		//	?
		//	cards+=Card*
		//	'HoleCardNumber' '(' number=INT ')' ('GameRule' '{' rule+=GameRule (',' rule+=GameRule)* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Game' name=ID ('Properties' '{' cardpropertytypes+=CardPropertyType (',' cardpropertytypes+=CardPropertyType)* '}')?
		//cards+=Card*
		//'HoleCardNumber' '(' number=INT ')' ('GameRule' '{' rule+=GameRule (',' rule+=GameRule)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'Game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('Properties' '{' cardpropertytypes+=CardPropertyType (',' cardpropertytypes+=CardPropertyType)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Properties'
		public Keyword getPropertiesKeyword_2_0() { return cPropertiesKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//cardpropertytypes+=CardPropertyType
		public Assignment getCardpropertytypesAssignment_2_2() { return cCardpropertytypesAssignment_2_2; }
		
		//CardPropertyType
		public RuleCall getCardpropertytypesCardPropertyTypeParserRuleCall_2_2_0() { return cCardpropertytypesCardPropertyTypeParserRuleCall_2_2_0; }
		
		//(',' cardpropertytypes+=CardPropertyType)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//cardpropertytypes+=CardPropertyType
		public Assignment getCardpropertytypesAssignment_2_3_1() { return cCardpropertytypesAssignment_2_3_1; }
		
		//CardPropertyType
		public RuleCall getCardpropertytypesCardPropertyTypeParserRuleCall_2_3_1_0() { return cCardpropertytypesCardPropertyTypeParserRuleCall_2_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//cards+=Card*
		public Assignment getCardsAssignment_3() { return cCardsAssignment_3; }
		
		//Card
		public RuleCall getCardsCardParserRuleCall_3_0() { return cCardsCardParserRuleCall_3_0; }
		
		//'HoleCardNumber'
		public Keyword getHoleCardNumberKeyword_4() { return cHoleCardNumberKeyword_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//number=INT
		public Assignment getNumberAssignment_6() { return cNumberAssignment_6; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_6_0() { return cNumberINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//('GameRule' '{' rule+=GameRule (',' rule+=GameRule)* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'GameRule'
		public Keyword getGameRuleKeyword_8_0() { return cGameRuleKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//rule+=GameRule
		public Assignment getRuleAssignment_8_2() { return cRuleAssignment_8_2; }
		
		//GameRule
		public RuleCall getRuleGameRuleParserRuleCall_8_2_0() { return cRuleGameRuleParserRuleCall_8_2_0; }
		
		//(',' rule+=GameRule)*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//','
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }
		
		//rule+=GameRule
		public Assignment getRuleAssignment_8_3_1() { return cRuleAssignment_8_3_1; }
		
		//GameRule
		public RuleCall getRuleGameRuleParserRuleCall_8_3_1_0() { return cRuleGameRuleParserRuleCall_8_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
	}
	public class CardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cardgame.CardGameLanguage.Card");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionCardPropertyParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefinitionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefinitionCardPropertyParserRuleCall_4_1_0 = (RuleCall)cDefinitionAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Card:
		//	'Card' name=ID '{' definition+=CardProperty (',' definition+=CardProperty)* '}'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Card' name=ID '{' definition+=CardProperty (',' definition+=CardProperty)* '}'?
		public Group getGroup() { return cGroup; }
		
		//'Card'
		public Keyword getCardKeyword_0() { return cCardKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//definition+=CardProperty
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }
		
		//CardProperty
		public RuleCall getDefinitionCardPropertyParserRuleCall_3_0() { return cDefinitionCardPropertyParserRuleCall_3_0; }
		
		//(',' definition+=CardProperty)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//definition+=CardProperty
		public Assignment getDefinitionAssignment_4_1() { return cDefinitionAssignment_4_1; }
		
		//CardProperty
		public RuleCall getDefinitionCardPropertyParserRuleCall_4_1_0() { return cDefinitionCardPropertyParserRuleCall_4_1_0; }
		
		//'}'?
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CardPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cardgame.CardGameLanguage.CardProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeCardPropertyTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeCardPropertyTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeCardPropertyTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//CardProperty:
		//	type=[CardPropertyType] (':' value=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=[CardPropertyType] (':' value=INT)?
		public Group getGroup() { return cGroup; }
		
		//type=[CardPropertyType]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[CardPropertyType]
		public CrossReference getTypeCardPropertyTypeCrossReference_0_0() { return cTypeCardPropertyTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeCardPropertyTypeIDTerminalRuleCall_0_0_1() { return cTypeCardPropertyTypeIDTerminalRuleCall_0_0_1; }
		
		//(':' value=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
	}
	public class CardPropertyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cardgame.CardGameLanguage.CardPropertyType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//CardPropertyType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class GameRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cardgame.CardGameLanguage.GameRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEqualRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GameRule:
		//	SingleRule | EqualRule;
		@Override public ParserRule getRule() { return rule; }
		
		//SingleRule | EqualRule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SingleRule
		public RuleCall getSingleRuleParserRuleCall_0() { return cSingleRuleParserRuleCall_0; }
		
		//EqualRule
		public RuleCall getEqualRuleParserRuleCall_1() { return cEqualRuleParserRuleCall_1; }
	}
	public class SingleRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cardgame.CardGameLanguage.SingleRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSingleRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRole1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRole1PlayerRoleEnumRuleCall_3_0 = (RuleCall)cRole1Assignment_3.eContents().get(0);
		private final Keyword cNoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNumber1Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNumber1INTTerminalRuleCall_5_0 = (RuleCall)cNumber1Assignment_5.eContents().get(0);
		private final Assignment cItemAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cItemCardPropertyTypeCrossReference_6_0 = (CrossReference)cItemAssignment_6.eContents().get(0);
		private final RuleCall cItemCardPropertyTypeIDTerminalRuleCall_6_0_1 = (RuleCall)cItemCardPropertyTypeCrossReference_6_0.eContents().get(1);
		private final Assignment cKeywordAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cKeywordExpressionKeywordEnumRuleCall_7_0 = (RuleCall)cKeywordAssignment_7.eContents().get(0);
		private final Assignment cRole2Assignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRole2PlayerRoleEnumRuleCall_8_0 = (RuleCall)cRole2Assignment_8.eContents().get(0);
		private final Keyword cNoKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cNumber2Assignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cNumber2INTTerminalRuleCall_10_0 = (RuleCall)cNumber2Assignment_10.eContents().get(0);
		private final Keyword cLevelKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cLevelAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cLevelINTTerminalRuleCall_12_0 = (RuleCall)cLevelAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//SingleRule:
		//	'SingleRule' name=ID '{'
		//	role1=PlayerRole 'No.' number1=INT item=[CardPropertyType] keyword=ExpressionKeyword role2=PlayerRole 'No.'
		//	number2=INT?
		//	'level' level=INT
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SingleRule' name=ID '{'
		//role1=PlayerRole 'No.' number1=INT item=[CardPropertyType] keyword=ExpressionKeyword role2=PlayerRole 'No.' number2=INT?
		//'level' level=INT
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'SingleRule'
		public Keyword getSingleRuleKeyword_0() { return cSingleRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//role1=PlayerRole
		public Assignment getRole1Assignment_3() { return cRole1Assignment_3; }
		
		//PlayerRole
		public RuleCall getRole1PlayerRoleEnumRuleCall_3_0() { return cRole1PlayerRoleEnumRuleCall_3_0; }
		
		//'No.'
		public Keyword getNoKeyword_4() { return cNoKeyword_4; }
		
		//number1=INT
		public Assignment getNumber1Assignment_5() { return cNumber1Assignment_5; }
		
		//INT
		public RuleCall getNumber1INTTerminalRuleCall_5_0() { return cNumber1INTTerminalRuleCall_5_0; }
		
		//item=[CardPropertyType]
		public Assignment getItemAssignment_6() { return cItemAssignment_6; }
		
		//[CardPropertyType]
		public CrossReference getItemCardPropertyTypeCrossReference_6_0() { return cItemCardPropertyTypeCrossReference_6_0; }
		
		//ID
		public RuleCall getItemCardPropertyTypeIDTerminalRuleCall_6_0_1() { return cItemCardPropertyTypeIDTerminalRuleCall_6_0_1; }
		
		//keyword=ExpressionKeyword
		public Assignment getKeywordAssignment_7() { return cKeywordAssignment_7; }
		
		//ExpressionKeyword
		public RuleCall getKeywordExpressionKeywordEnumRuleCall_7_0() { return cKeywordExpressionKeywordEnumRuleCall_7_0; }
		
		//role2=PlayerRole
		public Assignment getRole2Assignment_8() { return cRole2Assignment_8; }
		
		//PlayerRole
		public RuleCall getRole2PlayerRoleEnumRuleCall_8_0() { return cRole2PlayerRoleEnumRuleCall_8_0; }
		
		//'No.'
		public Keyword getNoKeyword_9() { return cNoKeyword_9; }
		
		//number2=INT?
		public Assignment getNumber2Assignment_10() { return cNumber2Assignment_10; }
		
		//INT
		public RuleCall getNumber2INTTerminalRuleCall_10_0() { return cNumber2INTTerminalRuleCall_10_0; }
		
		//'level'
		public Keyword getLevelKeyword_11() { return cLevelKeyword_11; }
		
		//level=INT
		public Assignment getLevelAssignment_12() { return cLevelAssignment_12; }
		
		//INT
		public RuleCall getLevelINTTerminalRuleCall_12_0() { return cLevelINTTerminalRuleCall_12_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class EqualRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cardgame.CardGameLanguage.EqualRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cComparedCardsNumKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNumberAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNumberINTTerminalRuleCall_4_0 = (RuleCall)cNumberAssignment_4.eContents().get(0);
		private final Keyword cComparedItemKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cItemAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cItemCardPropertyTypeCrossReference_6_0 = (CrossReference)cItemAssignment_6.eContents().get(0);
		private final RuleCall cItemCardPropertyTypeIDTerminalRuleCall_6_0_1 = (RuleCall)cItemCardPropertyTypeCrossReference_6_0.eContents().get(1);
		private final Keyword cLevelKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cLevelAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cLevelINTTerminalRuleCall_8_0 = (RuleCall)cLevelAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//EqualRule:
		//	'EqualRule' name=ID '{'
		//	'ComparedCardsNum' number=INT
		//	'ComparedItem' item=[CardPropertyType]
		//	'level' level=INT
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'EqualRule' name=ID '{'
		//'ComparedCardsNum' number=INT
		//'ComparedItem' item=[CardPropertyType]
		//'level' level=INT
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'EqualRule'
		public Keyword getEqualRuleKeyword_0() { return cEqualRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'ComparedCardsNum'
		public Keyword getComparedCardsNumKeyword_3() { return cComparedCardsNumKeyword_3; }
		
		//number=INT
		public Assignment getNumberAssignment_4() { return cNumberAssignment_4; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_4_0() { return cNumberINTTerminalRuleCall_4_0; }
		
		//'ComparedItem'
		public Keyword getComparedItemKeyword_5() { return cComparedItemKeyword_5; }
		
		//item=[CardPropertyType]
		public Assignment getItemAssignment_6() { return cItemAssignment_6; }
		
		//[CardPropertyType]
		public CrossReference getItemCardPropertyTypeCrossReference_6_0() { return cItemCardPropertyTypeCrossReference_6_0; }
		
		//ID
		public RuleCall getItemCardPropertyTypeIDTerminalRuleCall_6_0_1() { return cItemCardPropertyTypeIDTerminalRuleCall_6_0_1; }
		
		//'level'
		public Keyword getLevelKeyword_7() { return cLevelKeyword_7; }
		
		//level=INT
		public Assignment getLevelAssignment_8() { return cLevelAssignment_8; }
		
		//INT
		public RuleCall getLevelINTTerminalRuleCall_8_0() { return cLevelINTTerminalRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	public class ExpressionKeywordElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cardgame.CardGameLanguage.ExpressionKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIsBiggerThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIsBiggerThanIsBiggerThanKeyword_0_0 = (Keyword)cIsBiggerThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIsSmallerThanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIsSmallerThanIsSmallerThanKeyword_1_0 = (Keyword)cIsSmallerThanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIsEqualToEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIsEqualToIsEqualToKeyword_2_0 = (Keyword)cIsEqualToEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ExpressionKeyword:
		//	isBiggerThan | isSmallerThan | isEqualTo;
		public EnumRule getRule() { return rule; }
		
		//isBiggerThan | isSmallerThan | isEqualTo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//isBiggerThan
		public EnumLiteralDeclaration getIsBiggerThanEnumLiteralDeclaration_0() { return cIsBiggerThanEnumLiteralDeclaration_0; }
		
		//"isBiggerThan"
		public Keyword getIsBiggerThanIsBiggerThanKeyword_0_0() { return cIsBiggerThanIsBiggerThanKeyword_0_0; }
		
		//isSmallerThan
		public EnumLiteralDeclaration getIsSmallerThanEnumLiteralDeclaration_1() { return cIsSmallerThanEnumLiteralDeclaration_1; }
		
		//"isSmallerThan"
		public Keyword getIsSmallerThanIsSmallerThanKeyword_1_0() { return cIsSmallerThanIsSmallerThanKeyword_1_0; }
		
		//isEqualTo
		public EnumLiteralDeclaration getIsEqualToEnumLiteralDeclaration_2() { return cIsEqualToEnumLiteralDeclaration_2; }
		
		//"isEqualTo"
		public Keyword getIsEqualToIsEqualToKeyword_2_0() { return cIsEqualToIsEqualToKeyword_2_0; }
	}
	public class PlayerRoleElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cardgame.CardGameLanguage.PlayerRole");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlayerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlayerPlayerKeyword_0_0 = (Keyword)cPlayerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cComputerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cComputerComputerKeyword_1_0 = (Keyword)cComputerEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PlayerRole:
		//	Player | Computer;
		public EnumRule getRule() { return rule; }
		
		//Player | Computer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Player
		public EnumLiteralDeclaration getPlayerEnumLiteralDeclaration_0() { return cPlayerEnumLiteralDeclaration_0; }
		
		//"Player"
		public Keyword getPlayerPlayerKeyword_0_0() { return cPlayerPlayerKeyword_0_0; }
		
		//Computer
		public EnumLiteralDeclaration getComputerEnumLiteralDeclaration_1() { return cComputerEnumLiteralDeclaration_1; }
		
		//"Computer"
		public Keyword getComputerComputerKeyword_1_0() { return cComputerComputerKeyword_1_0; }
	}
	
	private final CardGameElements pCardGame;
	private final CardElements pCard;
	private final CardPropertyElements pCardProperty;
	private final CardPropertyTypeElements pCardPropertyType;
	private final GameRuleElements pGameRule;
	private final SingleRuleElements pSingleRule;
	private final EqualRuleElements pEqualRule;
	private final ExpressionKeywordElements eExpressionKeyword;
	private final PlayerRoleElements ePlayerRole;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CardGameLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pCardGame = new CardGameElements();
		this.pCard = new CardElements();
		this.pCardProperty = new CardPropertyElements();
		this.pCardPropertyType = new CardPropertyTypeElements();
		this.pGameRule = new GameRuleElements();
		this.pSingleRule = new SingleRuleElements();
		this.pEqualRule = new EqualRuleElements();
		this.eExpressionKeyword = new ExpressionKeywordElements();
		this.ePlayerRole = new PlayerRoleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.cardgame.CardGameLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CardGame:
	//	'Game' name=ID ('Properties' '{' cardpropertytypes+=CardPropertyType (',' cardpropertytypes+=CardPropertyType)* '}')
	//	?
	//	cards+=Card*
	//	'HoleCardNumber' '(' number=INT ')' ('GameRule' '{' rule+=GameRule (',' rule+=GameRule)* '}')?;
	public CardGameElements getCardGameAccess() {
		return pCardGame;
	}
	
	public ParserRule getCardGameRule() {
		return getCardGameAccess().getRule();
	}
	
	//Card:
	//	'Card' name=ID '{' definition+=CardProperty (',' definition+=CardProperty)* '}'?;
	public CardElements getCardAccess() {
		return pCard;
	}
	
	public ParserRule getCardRule() {
		return getCardAccess().getRule();
	}
	
	//CardProperty:
	//	type=[CardPropertyType] (':' value=INT)?;
	public CardPropertyElements getCardPropertyAccess() {
		return pCardProperty;
	}
	
	public ParserRule getCardPropertyRule() {
		return getCardPropertyAccess().getRule();
	}
	
	//CardPropertyType:
	//	name=ID;
	public CardPropertyTypeElements getCardPropertyTypeAccess() {
		return pCardPropertyType;
	}
	
	public ParserRule getCardPropertyTypeRule() {
		return getCardPropertyTypeAccess().getRule();
	}
	
	//GameRule:
	//	SingleRule | EqualRule;
	public GameRuleElements getGameRuleAccess() {
		return pGameRule;
	}
	
	public ParserRule getGameRuleRule() {
		return getGameRuleAccess().getRule();
	}
	
	//SingleRule:
	//	'SingleRule' name=ID '{'
	//	role1=PlayerRole 'No.' number1=INT item=[CardPropertyType] keyword=ExpressionKeyword role2=PlayerRole 'No.'
	//	number2=INT?
	//	'level' level=INT
	//	'}';
	public SingleRuleElements getSingleRuleAccess() {
		return pSingleRule;
	}
	
	public ParserRule getSingleRuleRule() {
		return getSingleRuleAccess().getRule();
	}
	
	//EqualRule:
	//	'EqualRule' name=ID '{'
	//	'ComparedCardsNum' number=INT
	//	'ComparedItem' item=[CardPropertyType]
	//	'level' level=INT
	//	'}';
	public EqualRuleElements getEqualRuleAccess() {
		return pEqualRule;
	}
	
	public ParserRule getEqualRuleRule() {
		return getEqualRuleAccess().getRule();
	}
	
	//enum ExpressionKeyword:
	//	isBiggerThan | isSmallerThan | isEqualTo;
	public ExpressionKeywordElements getExpressionKeywordAccess() {
		return eExpressionKeyword;
	}
	
	public EnumRule getExpressionKeywordRule() {
		return getExpressionKeywordAccess().getRule();
	}
	
	//enum PlayerRole:
	//	Player | Computer;
	public PlayerRoleElements getPlayerRoleAccess() {
		return ePlayerRole;
	}
	
	public EnumRule getPlayerRoleRule() {
		return getPlayerRoleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
