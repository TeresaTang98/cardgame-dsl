/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.cardgame.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.cardgame.ide.contentassist.antlr.internal.InternalCardGameLanguageParser;
import uk.ac.kcl.inf.cardgame.services.CardGameLanguageGrammarAccess;

public class CardGameLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CardGameLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CardGameLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getGameRuleAccess().getAlternatives(), "rule__GameRule__Alternatives");
			builder.put(grammarAccess.getExpressionKeywordAccess().getAlternatives(), "rule__ExpressionKeyword__Alternatives");
			builder.put(grammarAccess.getPlayerRoleAccess().getAlternatives(), "rule__PlayerRole__Alternatives");
			builder.put(grammarAccess.getCardGameAccess().getGroup(), "rule__CardGame__Group__0");
			builder.put(grammarAccess.getCardGameAccess().getGroup_2(), "rule__CardGame__Group_2__0");
			builder.put(grammarAccess.getCardGameAccess().getGroup_2_3(), "rule__CardGame__Group_2_3__0");
			builder.put(grammarAccess.getCardGameAccess().getGroup_8(), "rule__CardGame__Group_8__0");
			builder.put(grammarAccess.getCardGameAccess().getGroup_8_3(), "rule__CardGame__Group_8_3__0");
			builder.put(grammarAccess.getCardAccess().getGroup(), "rule__Card__Group__0");
			builder.put(grammarAccess.getCardAccess().getGroup_4(), "rule__Card__Group_4__0");
			builder.put(grammarAccess.getCardPropertyAccess().getGroup(), "rule__CardProperty__Group__0");
			builder.put(grammarAccess.getCardPropertyAccess().getGroup_1(), "rule__CardProperty__Group_1__0");
			builder.put(grammarAccess.getSingleRuleAccess().getGroup(), "rule__SingleRule__Group__0");
			builder.put(grammarAccess.getEqualRuleAccess().getGroup(), "rule__EqualRule__Group__0");
			builder.put(grammarAccess.getCardGameAccess().getNameAssignment_1(), "rule__CardGame__NameAssignment_1");
			builder.put(grammarAccess.getCardGameAccess().getCardpropertytypesAssignment_2_2(), "rule__CardGame__CardpropertytypesAssignment_2_2");
			builder.put(grammarAccess.getCardGameAccess().getCardpropertytypesAssignment_2_3_1(), "rule__CardGame__CardpropertytypesAssignment_2_3_1");
			builder.put(grammarAccess.getCardGameAccess().getCardsAssignment_3(), "rule__CardGame__CardsAssignment_3");
			builder.put(grammarAccess.getCardGameAccess().getNumberAssignment_6(), "rule__CardGame__NumberAssignment_6");
			builder.put(grammarAccess.getCardGameAccess().getRuleAssignment_8_2(), "rule__CardGame__RuleAssignment_8_2");
			builder.put(grammarAccess.getCardGameAccess().getRuleAssignment_8_3_1(), "rule__CardGame__RuleAssignment_8_3_1");
			builder.put(grammarAccess.getCardAccess().getNameAssignment_1(), "rule__Card__NameAssignment_1");
			builder.put(grammarAccess.getCardAccess().getDefinitionAssignment_3(), "rule__Card__DefinitionAssignment_3");
			builder.put(grammarAccess.getCardAccess().getDefinitionAssignment_4_1(), "rule__Card__DefinitionAssignment_4_1");
			builder.put(grammarAccess.getCardPropertyAccess().getTypeAssignment_0(), "rule__CardProperty__TypeAssignment_0");
			builder.put(grammarAccess.getCardPropertyAccess().getValueAssignment_1_1(), "rule__CardProperty__ValueAssignment_1_1");
			builder.put(grammarAccess.getCardPropertyTypeAccess().getNameAssignment(), "rule__CardPropertyType__NameAssignment");
			builder.put(grammarAccess.getSingleRuleAccess().getNameAssignment_1(), "rule__SingleRule__NameAssignment_1");
			builder.put(grammarAccess.getSingleRuleAccess().getRole1Assignment_3(), "rule__SingleRule__Role1Assignment_3");
			builder.put(grammarAccess.getSingleRuleAccess().getNumber1Assignment_5(), "rule__SingleRule__Number1Assignment_5");
			builder.put(grammarAccess.getSingleRuleAccess().getItemAssignment_6(), "rule__SingleRule__ItemAssignment_6");
			builder.put(grammarAccess.getSingleRuleAccess().getKeywordAssignment_7(), "rule__SingleRule__KeywordAssignment_7");
			builder.put(grammarAccess.getSingleRuleAccess().getRole2Assignment_8(), "rule__SingleRule__Role2Assignment_8");
			builder.put(grammarAccess.getSingleRuleAccess().getNumber2Assignment_10(), "rule__SingleRule__Number2Assignment_10");
			builder.put(grammarAccess.getSingleRuleAccess().getLevelAssignment_12(), "rule__SingleRule__LevelAssignment_12");
			builder.put(grammarAccess.getEqualRuleAccess().getNameAssignment_1(), "rule__EqualRule__NameAssignment_1");
			builder.put(grammarAccess.getEqualRuleAccess().getNumberAssignment_4(), "rule__EqualRule__NumberAssignment_4");
			builder.put(grammarAccess.getEqualRuleAccess().getItemAssignment_6(), "rule__EqualRule__ItemAssignment_6");
			builder.put(grammarAccess.getEqualRuleAccess().getLevelAssignment_8(), "rule__EqualRule__LevelAssignment_8");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CardGameLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalCardGameLanguageParser createParser() {
		InternalCardGameLanguageParser result = new InternalCardGameLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CardGameLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CardGameLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
